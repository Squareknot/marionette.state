{"version":3,"sources":["marionette.state.min.js","/source/marionette.state.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","Marionette","State","_","Backbone","Mn","this","syncBinding","entity","event","handlers","modelEventMatch","changeOpts","syncing","collectionMatch","Collection","match","collectionEventMatcher","modelMatch","Model","state","modelEventMatcher","changeAttr","changeArgs","push","get","isFunction","apply","handlerKeys","split","spaceMatcher","handlerKey","sync","bindings","eventStr","events","syncEntityEvents","Syncing","_when","_now","hasAnyChanged","model","_model","_len2","arguments","attrs","Array","_key2","chain","changed","keys","intersection","size","value","extend","modelClass","undefined","defaultState","componentEvents","_component","_initialState","constructor","_ref","initialState","component","preventDestroy","_initState","bindComponent","__super__","reset","_proxyModelEvents","getModel","getInitialState","clone","attr","set","val","options","resetAttrs","changedAttributes","previous","previousAttributes","_len","_key","concat","_ref2","bindEntityEvents","_bindLifecycle","unbindComponent","unbindEntityEvents","_unbindLifecycle","_boundDestroy","destroy","bind","listenTo","stopListening","entityEvents","other","trigger","state_functions","off","handler","on","stop","index"],"mappings":"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","file":"marionette.state.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('underscore'), require('backbone'), require('backbone.marionette')) :\n  typeof define === 'function' && define.amd ? define(['underscore', 'backbone', 'backbone.marionette'], factory) :\n  global.Marionette.State = factory(global._, global.Backbone, global.Mn)\n}(this, function (_, Backbone, Mn) { 'use strict';\n\n  const State = Mn.Object.extend({\n\n    // State model class to instantiate\n    modelClass: undefined,\n\n    // Default state attributes hash\n    defaultState: undefined,\n\n    // Events from my component\n    componentEvents: undefined,\n\n    // State model instance\n    _model: undefined,\n\n    // My component, facilitating lifecycle management and event bindings\n    _component: undefined,\n\n    // Initial state attributes hash after 'initialState' option and defaults are applied\n    _initialState: undefined,\n\n    // options {\n    //   initialState: {object} Attributes that will override `defaultState`.  The result of\n    //     defaultState + initialState is the state reverted to by `#reset`.\n    //   component: {Mn object} Object to which to bind `componentEvents` and also lifecycle;\n    //     i.e., when `component` fires 'destroy', then destroy myself.\n    //   preventDestroy: {boolean} If true, then this will not destroy on `component` destroy.\n    // }\n    constructor({ initialState, component, preventDestroy }={}) {\n      // State model class is either passed in, on the class, or a standard Backbone model\n      this.modelClass = this.modelClass || Backbone.Model;\n\n      // Initialize state\n      this._initState(initialState);\n\n      if (component) {\n        this.bindComponent(component, { preventDestroy });\n      }\n\n      State.__super__.constructor.apply(this, arguments);\n    },\n\n    // Initialize model with attrs or reset it, destructively, to conform to attrs.\n    _initState(attrs) {\n      // Set initial state.\n      this._initialState = _.extend({}, this.defaultState, attrs);\n\n      if (this._model) {\n        // Reset existing model with initial state.\n        this.reset();\n      } else {\n        // Create new model with initial state.\n        /* eslint-disable new-cap */\n        this._model = new this.modelClass(this._initialState);\n        this._proxyModelEvents(this._model);\n      }\n    },\n\n    // Return the state model.\n    getModel() {\n      return this._model;\n    },\n\n    // Returns the initiate state, which is reverted to by reset()\n    getInitialState() {\n      return _.clone(this._initialState);\n    },\n\n    // Proxy to model get().\n    get(attr) {\n      return this._model.get(attr);\n    },\n\n    // Proxy to model set().\n    set(key, val, options) {\n      this._model.set(key, val, options);\n      return this;\n    },\n\n    // Return state to its initial value.\n    // If `attrs` is provided, they will override initial values for a \"partial\" reset.\n    // Initial state will remain unchanged regardless of override attributes.\n    reset(attrs, options) {\n      var resetAttrs = _.extend({}, this._initialState, attrs);\n      this._model.set(resetAttrs, options);\n      return this;\n    },\n\n    // Proxy to model changedAttributes().\n    changedAttributes() {\n      return this._model.changedAttributes();\n    },\n\n    // Proxy to model previous().\n    previous(attr) {\n      return this._model.previous(attr);\n    },\n\n    // Proxy to model previousAttributes().\n    previousAttributes() {\n      return this._model.previousAttributes();\n    },\n\n    // Whether any of the passed attributes were changed during the last modification\n    hasAnyChanged(...attrs) {\n      return State.hasAnyChanged(this, ...attrs);\n    },\n\n    // Bind `componentEvents` to `component` and cascade destroy to self when component fires\n    // 'destroy'.  To prevent self-destroy behavior, pass `preventDestroy: true` as an option.\n    bindComponent(component, { preventDestroy }={}) {\n      this.bindEntityEvents(component, this.componentEvents);\n      if (!preventDestroy) {\n        this._bindLifecycle(component);\n      }\n    },\n\n    // Unbind `componentEvents` from `component` and stop listening to component 'destroy' event.\n    unbindComponent(component) {\n      this.unbindEntityEvents(component, this.componentEvents);\n      this._unbindLifecycle(component);\n    },\n\n    // When `component` fires \"destroy\" event, this State will also destroy.\n    _bindLifecycle(component) {\n      if (!this._boundDestroy) {\n        this._boundDestroy = this.destroy.bind(this);\n      }\n      this.listenTo(component, 'destroy', this._boundDestroy);\n      return this;\n    },\n\n    // Stop listening to `component` \"destroy\" event.\n    _unbindLifecycle(component) {\n      this.stopListening(component, 'destroy', this._boundDestroy);\n      return this;\n    },\n\n    // Proxy to StateFunctions#syncEntityEvents.\n    syncEntityEvents(entity, entityEvents, event) {\n      State.syncEntityEvents(this, entity, entityEvents, event);\n      return this;\n    },\n\n    // Convert model events to state events\n    _proxyModelEvents: function (other) {\n      this.listenTo(other, 'all', function () {\n        if (arguments.length > 1 && arguments[1] === this._model) {\n          // Replace model argument with State\n          arguments[1] = this;\n        }\n        this.trigger.apply(this, arguments);\n      });\n    }\n  });\n\n  var state = State;\n\n  var state_functions = {\n    get syncEntityEvents () { return syncEntityEvents; },\n    get hasAnyChanged () { return hasAnyChanged; }\n  };\n\n  var modelEventMatcher = /^(?:all|change|change:(.+))$/;\n  var collectionEventMatcher = /^(?:all|reset)$/;\n  var spaceMatcher = /\\s+/;\n\n  // Sync individual event binding 'event1' => 'handler1 handler2'.\n  function syncBinding(target, entity, event, handlers) {\n    var changeOpts = { syncing: true };\n    var modelEventMatch;\n\n    // Only certain model/collection events are syncable.\n    var collectionMatch =\n        entity instanceof Backbone.Collection &&\n        event.match(collectionEventMatcher);\n    var modelMatch =\n        (entity instanceof Backbone.Model || entity instanceof state) &&\n        (modelEventMatch = event.match(modelEventMatcher));\n    if (!collectionMatch && !modelMatch) { return; }\n\n    // Collect change event arguments.\n    var changeArgs = [entity];\n    var changeAttr;\n    if (modelEventMatch && (changeAttr = modelEventMatch[1])) {\n      changeArgs.push(entity.get(changeAttr));\n    }\n    changeArgs.push(changeOpts);\n\n    // Call change event handler.\n    if (_.isFunction(handlers)) {\n      handlers.apply(target, changeArgs);\n    } else {\n      var handlerKeys = handlers.split(spaceMatcher);\n      for (var i = 0; i < handlerKeys.length; i++) {\n        var handlerKey = handlerKeys[i];\n        target[handlerKey].apply(target, changeArgs);\n      }\n    }\n  }\n\n  // Sync bindings hash { 'event1 event 2': 'handler1 handler2' }.\n  function sync(target, entity, bindings) {\n    for (var eventStr in bindings) {\n      var handlers = bindings[eventStr];\n      var events = eventStr.split(spaceMatcher);\n      for (var i = 0; i < events.length; i++) {\n        var event = events[i];\n        syncBinding(target, entity, event, handlers);\n      }\n    }\n  }\n\n  // A stoppable handle on the syncing listener\n  class Syncing {\n\n    constructor(target, entity, bindings) {\n      this.target = target;\n      this.entity = entity;\n      this.bindings = bindings;\n    }\n\n    stop() {\n      Mn.unbindEntityEvents(this.target, this.entity, this.bindings);\n      this.target.off(this.event, this.handler);\n      this.event = this.handler = null;\n    }\n\n    _when(event) {\n      Mn.bindEntityEvents(this.target, this.entity, this.bindings);\n      this.event = event;\n      this.handler = _.bind(sync, this, this.target, this.entity, this.bindings);\n      this.target\n        .on(this.event, this.handler)\n        .on('destroy', _.bind(this.stop, this));\n    }\n\n    _now() {\n      Mn.bindEntityEvents(this.target, this.entity, this.bindings);\n      sync(this.target, this.entity, this.bindings);\n    }\n  }\n\n  // Binds events handlers located on target to an entity using Marionette.bindEntityEvents, and\n  // also \"syncs\" initial state either immediately or whenever target fires a specific event.\n  //\n  // Initial state is synced by calling certain handlers at a precise moment.  Only the following\n  // entity events will sync their handlers: 'all', 'change', 'change:attr', and 'reset'.\n  //\n  // Returns a Syncing instance.  While syncing handlers are unbound on target destroy, the syncing\n  // instance has a single public method stop() for ceasing syncing on target events early.\n  function syncEntityEvents(target, entity, bindings, event) {\n    var syncing = new Syncing(target, entity, bindings);\n    if (event) {\n      syncing._when(event);\n    } else {\n      syncing._now();\n    }\n    return syncing;\n  }\n\n  // Determine if any of the passed attributes were changed during the last modification of `model`.\n  function hasAnyChanged(model, ...attrs) {\n    // Support Marionette.State or Backbone.Model performantly.\n    if (model._model) { model = model._model; }\n    return !!_.chain(model.changed)\n      .keys()\n      .intersection(attrs)\n      .size()\n      .value();\n  }\n\n  _.extend(state, state_functions);\n\n  var index = state;\n\n  return index;\n\n}));\n"],"sourceRoot":"/source/"}