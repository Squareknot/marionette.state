{"version":3,"sources":["marionette.state.min.js","/source/marionette.state.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","Marionette","State","_","Backbone","Mn","this","syncBinding","entity","event","handlers","changeAttrMatch","collectionMatch","Collection","match","collectionEventMatcher","modelMatch","Model","state","modelEventMatcher","changeValue","get","isFunction","call","handlerKeys","split","spaceMatcher","handlerKey","sync","bindings","eventStr","events","syncEntityEvents","syncing","Syncing","_when","_now","hasAnyChanged","model","_model","_len2","arguments","attrs","Array","_key2","chain","changed","keys","intersection","size","value","extend","modelClass","undefined","defaultState","componentEvents","_component","_initialState","constructor","_ref","initialState","component","preventDestroy","_initState","bindComponent","__super__","apply","reset","_proxyModelEvents","getModel","getInitialState","clone","attr","set","val","options","resetAttrs","changedAttributes","previousAttributes","hasChanged","_len","_key","concat","_ref2","bindEntityEvents","_bindLifecycle","unbindComponent","unbindEntityEvents","_unbindLifecycle","_boundDestroy","destroy","bind","listenTo","stopListening","entityEvents","other","trigger","state_functions","off","handler","on","stop","index"],"mappings":"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","file":"marionette.state.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('underscore'), require('backbone'), require('backbone.marionette')) :\n  typeof define === 'function' && define.amd ? define(['underscore', 'backbone', 'backbone.marionette'], factory) :\n  global.Marionette.State = factory(global._, global.Backbone, global.Mn)\n}(this, function (_, Backbone, Mn) { 'use strict';\n\n  const State = Mn.Object.extend({\n\n    // State model class to instantiate\n    modelClass: undefined,\n\n    // Default state attributes hash\n    defaultState: undefined,\n\n    // Events from my component\n    componentEvents: undefined,\n\n    // State model instance\n    _model: undefined,\n\n    // My component, facilitating lifecycle management and event bindings\n    _component: undefined,\n\n    // Initial state attributes hash after 'initialState' option and defaults are applied\n    _initialState: undefined,\n\n    // options {\n    //   initialState: {object} Attributes that will override `defaultState`.  The result of\n    //     defaultState + initialState is the state reverted to by `#reset`.\n    //   component: {Mn object} Object to which to bind `componentEvents` and also lifecycle;\n    //     i.e., when `component` fires 'destroy', then destroy myself.\n    //   preventDestroy: {boolean} If true, then this will not destroy on `component` destroy.\n    // }\n    constructor({ initialState, component, preventDestroy }={}) {\n      // State model class is either passed in, on the class, or a standard Backbone model\n      this.modelClass = this.modelClass || Backbone.Model;\n\n      // Initialize state\n      this._initState(initialState);\n\n      if (component) {\n        this.bindComponent(component, { preventDestroy });\n      }\n\n      State.__super__.constructor.apply(this, arguments);\n    },\n\n    // Initialize model with attrs or reset it, destructively, to conform to attrs.\n    _initState(attrs) {\n      // Set initial state.\n      this._initialState = _.extend({}, this.defaultState, attrs);\n\n      if (this._model) {\n        // Reset existing model with initial state.\n        this.reset();\n      } else {\n        // Create new model with initial state.\n        /* eslint-disable new-cap */\n        this._model = new this.modelClass(this._initialState);\n        this._proxyModelEvents(this._model);\n      }\n    },\n\n    // Return the state model.\n    getModel() {\n      return this._model;\n    },\n\n    // Returns the initiate state, which is reverted to by reset()\n    getInitialState() {\n      return _.clone(this._initialState);\n    },\n\n    // Proxy to model get().\n    get(attr) {\n      return this._model.get(attr);\n    },\n\n    // Proxy to model set().\n    set(key, val, options) {\n      this._model.set(key, val, options);\n      return this;\n    },\n\n    // Return state to its initial value.\n    // If `attrs` is provided, they will override initial values for a \"partial\" reset.\n    // Initial state will remain unchanged regardless of override attributes.\n    reset(attrs, options) {\n      var resetAttrs = _.extend({}, this._initialState, attrs);\n      this._model.set(resetAttrs, options);\n      return this;\n    },\n\n    // Proxy to model changedAttributes().\n    changedAttributes() {\n      return this._model.changedAttributes();\n    },\n\n    // Proxy to model previousAttributes().\n    previousAttributes() {\n      return this._model.previousAttributes();\n    },\n\n    // Whether state has changed since the last `set()`\n    hasChanged() {\n      return !!_.keys(this._model.changed).length;\n    },\n\n    // Whether any of the passed attributes were changed during the last modification\n    hasAnyChanged(...attrs) {\n      return State.hasAnyChanged(this, ...attrs);\n    },\n\n    // Bind `componentEvents` to `component` and cascade destroy to self when component fires\n    // 'destroy'.  To prevent self-destroy behavior, pass `preventDestroy: true` as an option.\n    bindComponent(component, { preventDestroy }={}) {\n      this.bindEntityEvents(component, this.componentEvents);\n      if (!preventDestroy) {\n        this._bindLifecycle(component);\n      }\n    },\n\n    // Unbind `componentEvents` from `component` and stop listening to component 'destroy' event.\n    unbindComponent(component) {\n      this.unbindEntityEvents(component, this.componentEvents);\n      this._unbindLifecycle(component);\n    },\n\n    // When `component` fires \"destroy\" event, this State will also destroy.\n    _bindLifecycle(component) {\n      if (!this._boundDestroy) {\n        this._boundDestroy = this.destroy.bind(this);\n      }\n      this.listenTo(component, 'destroy', this._boundDestroy);\n      return this;\n    },\n\n    // Stop listening to `component` \"destroy\" event.\n    _unbindLifecycle(component) {\n      this.stopListening(component, 'destroy', this._boundDestroy);\n      return this;\n    },\n\n    // Proxy to StateFunctions#syncEntityEvents.\n    syncEntityEvents(entity, entityEvents, event) {\n      State.syncEntityEvents(this, entity, entityEvents, event);\n      return this;\n    },\n\n    // Convert model events to state events\n    _proxyModelEvents: function (other) {\n      this.listenTo(other, 'all', function () {\n        if (arguments.length > 1 && arguments[1] === this._model) {\n          // Replace model argument with State\n          arguments[1] = this;\n        }\n        this.trigger.apply(this, arguments);\n      });\n    }\n  });\n\n  var state = State;\n\n  var state_functions = {\n    get syncEntityEvents () { return syncEntityEvents; },\n    get hasAnyChanged () { return hasAnyChanged; }\n  };\n\n  var modelEventMatcher = /^(?:all|change|change:(.+))$/;\n  var collectionEventMatcher = /^(?:all|reset)$/;\n  var spaceMatcher = /\\s+/;\n\n  // Sync individual event binding 'event1' => 'handler1 handler2'.\n  function syncBinding(target, entity, event, handlers) {\n    var changeAttrMatch;\n    var collectionMatch =\n      entity instanceof Backbone.Collection &&\n      event.match(collectionEventMatcher);\n    var modelMatch =\n      (entity instanceof Backbone.Model || entity instanceof state) &&\n      (changeAttrMatch = event.match(modelEventMatcher));\n    if (!collectionMatch && !modelMatch) {\n      return;\n    }\n\n    var changeValue = changeAttrMatch && entity.get(changeAttrMatch[1]);\n    if (_.isFunction(handlers)) {\n      handlers.call(target, entity, changeValue);\n    } else {\n      var handlerKeys = handlers.split(spaceMatcher);\n      for (var i = 0; i < handlerKeys.length; i++) {\n        var handlerKey = handlerKeys[i];\n        target[handlerKey](entity, changeValue);\n      }\n    }\n  }\n\n  // Sync bindings hash { 'event1 event 2': 'handler1 handler2' }.\n  function sync(target, entity, bindings) {\n    for (var eventStr in bindings) {\n      var handlers = bindings[eventStr];\n      var events = eventStr.split(spaceMatcher);\n      for (var i = 0; i < events.length; i++) {\n        var event = events[i];\n        syncBinding(target, entity, event, handlers);\n      }\n    }\n  }\n\n  // A stoppable handle on the syncing listener\n  class Syncing {\n\n    constructor(target, entity, bindings) {\n      this.target = target;\n      this.entity = entity;\n      this.bindings = bindings;\n    }\n\n    stop() {\n      Mn.unbindEntityEvents(this.target, this.entity, this.bindings);\n      this.target.off(this.event, this.handler);\n      this.event = this.handler = null;\n    }\n\n    _when(event) {\n      Mn.bindEntityEvents(this.target, this.entity, this.bindings);\n      this.event = event;\n      this.handler = _.bind(sync, this, this.target, this.entity, this.bindings);\n      this.target\n        .on(this.event, this.handler)\n        .on('destroy', _.bind(this.stop, this));\n    }\n\n    _now() {\n      Mn.bindEntityEvents(this.target, this.entity, this.bindings);\n      sync(this.target, this.entity, this.bindings);\n    }\n  }\n\n  // Binds events handlers located on target to an entity using Marionette.bindEntityEvents, and\n  // also \"syncs\" initial state either immediately or whenever target fires a specific event.\n  //\n  // Initial state is synced by calling certain handlers at a precise moment.  Only the following\n  // entity events will sync their handlers: 'all', 'change', 'change:attr', and 'reset'.\n  //\n  // Returns a Syncing instance.  While syncing handlers are unbound on target destroy, the syncing\n  // instance has a single public method stop() for ceasing syncing on target events early.\n  function syncEntityEvents(target, entity, bindings, event) {\n    var syncing = new Syncing(target, entity, bindings);\n    if (event) {\n      syncing._when(event);\n    } else {\n      syncing._now();\n    }\n    return syncing;\n  }\n\n  // Determine if any of the passed attributes were changed during the last modification of `model`.\n  function hasAnyChanged(model, ...attrs) {\n    // Support Marionette.State or Backbone.Model performantly.\n    if (model._model) { model = model._model; }\n    return !!_.chain(model.changed)\n      .keys()\n      .intersection(attrs)\n      .size()\n      .value();\n  }\n\n  _.extend(state, state_functions);\n\n  var index = state;\n\n  return index;\n\n}));\n"],"sourceRoot":"/source/"}