{"version":3,"sources":["/source/marionette.state.js","marionette.state.min.js"],"names":["global","factory","exports","module","require","define","amd","Marionette","State","_","Backbone","Mn","this","callHandlers","target","entity","handlers","attr","value","get","undefined","isFunction","call","handlerKeys","split","spaceMatcher","each","handlerKey","syncBinding","event","changeMatch","Collection","Model","state","match","changeMatcher","syncBindings","events","sync","bindings","eventStr","Syncing","Object","extend","modelClass","defaultState","componentEvents","_model","_component","_initialState","constructor","options","arguments","bindLifecycle","initState","initialState","__super__","apply","attrs","reset","_proxyModelEvents","getInitialState","clone","getModel","set","Error","resetAttrs","getChanged","changedAttributes","getPrevious","previousAttributes","hasAnyChanged","_len","length","Array","_key","chain","changed","keys","intersection","size","syncComponent","component","stateEvents","syncEvent","isString","bindEntityEvents","syncEntityEvents","stopSyncingComponent","unbindEntityEvents","stopSyncingEntityEvents","_boundDestroy","boundDestroy","destroy","bind","listenTo","unbindLifecycle","stopListening","entityEvents","other","trigger","prototype","when","eventObj","_this","handler","now","stop","stateFunctions","syncing","state_functions","index"],"mappings":"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","file":"marionette.state.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('underscore'), require('backbone'), require('backbone.marionette')) :\n  typeof define === 'function' && define.amd ? define(['underscore', 'backbone', 'backbone.marionette'], factory) :\n  global.Marionette.State = factory(global._, global.Backbone, global.Mn)\n}(this, function (_, Backbone, Mn) { 'use strict';\n\n  const State = Mn.Object.extend({\n\n    // State model class to instantiate\n    modelClass: undefined,\n\n    // Default state attributes hash\n    defaultState: undefined,\n\n    // Events from my component\n    componentEvents: undefined,\n\n    // State model instance\n    _model: undefined,\n\n    // My component, facilitating lifecycle management and event bindings\n    _component: undefined,\n\n    // Initial state attributes hash after 'initialState' option and defaults are applied\n    _initialState: undefined,\n\n    // options {\n    //   bindLifecycle: {Mn object} Optionally bind lifecycle to object.\n    //   initialState: {attrs} Optional initial state (defaultState will still be applied)\n    constructor(options={}) {\n      if (options.bindLifecycle) { this.bindLifecycle(options.bindLifecycle); }\n\n      // State model class is either passed in, on the class, or a standard Backbone model\n      this.modelClass = options.modelClass || this.modelClass || Backbone.Model;\n\n      // Initialize state\n      this.initState(options.initialState);\n\n      State.__super__.constructor.apply(this, arguments);\n    },\n\n    // Initialize model with attrs or reset it, destructively, to conform to attrs.\n    initState(attrs, options) {\n      // Set initial state.\n      this._initialState = _.extend({}, this.defaultState, attrs);\n\n      if (this._model) {\n        // Reset existing model with initial state.\n        this.reset(null, options);\n      } else {\n        // Create new model with initial state.\n        /* eslint-disable new-cap */\n        this._model = new this.modelClass(this._initialState);\n        this._proxyModelEvents(this._model);\n      }\n\n      return this;\n    },\n\n    // Returns the initiate state, which is reverted to by reset()\n    getInitialState() {\n      return _.clone(this._initialState);\n    },\n\n    // Return the state model.\n    getModel() {\n      return this._model;\n    },\n\n    // Proxy to model set().\n    set() {\n      if (!this._model) { throw new Mn.Error('Initialize state first.'); }\n      this._model.set.apply(this._model, arguments);\n      return this;\n    },\n\n    // Proxy to model get().\n    get() {\n      if (!this._model) { throw new Mn.Error('Initialize state first.'); }\n      return this._model.get.apply(this._model, arguments);\n    },\n\n    // Return state to its initial value.\n    // If `attrs` is provided, they will override initial values for a \"partial\" reset.\n    reset(attrs, options) {\n      var resetAttrs = _.extend({}, this._initialState, attrs);\n      this._model.set(resetAttrs, options);\n      return this;\n    },\n\n    // Proxy to model changedAttributes().\n    getChanged() {\n      return this._model.changedAttributes();\n    },\n\n    // Proxy to model previousAttributes().\n    getPrevious() {\n      return this._model.previousAttributes();\n    },\n\n    // Determine if any of the passed attributes were changed during the last modification.\n    hasAnyChanged(...attrs) {\n      return !!_.chain(this._model.changed)\n        .keys()\n        .intersection(attrs)\n        .size()\n        .value();\n    },\n\n    syncComponent(component, stateEvents, syncEvent) {\n      if (_.isString(stateEvents)) {\n        syncEvent = stateEvents;\n      } else {\n        stateEvents = stateEvents || component.stateEvents;\n      }\n\n      if (this.componentEvents) {\n        this.bindEntityEvents(component, this.componentEvents);\n      }\n      if (stateEvents) {\n        State.syncEntityEvents(component, this, stateEvents, syncEvent);\n      }\n      return this;\n    },\n\n    stopSyncingComponent(component, stateEvents, syncEvent) {\n      if (this.componentEvents) {\n        this.unbindEntityEvents(component, this.componentEvents);\n      }\n      State.stopSyncingEntityEvents(component, this, stateEvents, syncEvent);\n      return this;\n    },\n\n    bindLifecycle(component) {\n      if (!this._boundDestroy) { this.boundDestroy = this.destroy.bind(this); }\n      this.listenTo(component, 'destroy', this._boundDestroy);\n      return this;\n    },\n\n    unbindLifecycle(component) {\n      this.stopListening(component, 'destroy', this._boundDestroy);\n    },\n\n    // Proxy to StateFunctions#syncEntityEvents.\n    syncEntityEvents(entity, entityEvents, event) {\n      State.syncEntityEvents(this, entity, entityEvents, event);\n      return this;\n    },\n\n    _proxyModelEvents: function (other) {\n      this.listenTo(other, 'all', function () {\n        if (arguments.length > 1 && arguments[1] === this._model) {\n          arguments[1] = this;\n        }\n        this.trigger.apply(this, arguments);\n      }.bind(this));\n    }\n  });\n\n  var state = State;\n\n  var changeMatcher = /^change:(.+)/;\n  var spaceMatcher = /\\s+/;\n\n  // Call all handlers optionally with a value (given a named attribute 'attr')\n  function callHandlers(target, entity, handlers, attr) {\n    var value = attr ? entity.get(attr) : undefined;\n\n    if (_.isFunction(handlers)) {\n      handlers.call(target, entity, value);\n    } else {\n      var handlerKeys = handlers.split(spaceMatcher);\n      _.each(handlerKeys, (handlerKey) => {\n        target[handlerKey](entity, value);\n      });\n    }\n  }\n\n  // Sync 'target' with event 'event1' and its handlers 'handler1 handler2', depending on event\n  // and entity type.  Call value handlers for Backbone.Model 'change:attr' events, and call generic\n  // handlers for Backbone.Model 'change', 'all' or Backbone.Collection 'change', 'all', or 'reset'.\n  function syncBinding(target, entity, event, handlers) {\n    var changeMatch;\n    if (event === 'change' || event === 'all' ||\n        (entity instanceof Backbone.Collection && event === 'reset')) {\n      callHandlers(target, entity, handlers);\n    } else if (\n        (entity instanceof Backbone.Model || entity instanceof state) &&\n        (changeMatch = event.match(changeMatcher))) {\n      var attr = changeMatch[1];\n      callHandlers(target, entity, handlers, attr);\n    }\n  }\n\n  // Sync 'target' with an array of events ['event1', 'event2'] and their handlers\n  // 'handler1 handler2'.\n  function syncBindings(target, entity, events, handlers) {\n    _.each(events, (event) => {\n      syncBinding(target, entity, event, handlers);\n    });\n  }\n\n  // Sync 'target' with the bindings hash { 'event1 event 2': 'handler1 handler2' }.\n  function sync(target, entity, bindings) {\n    _.each(bindings, (handlers, eventStr) => {\n      var events = eventStr.split(spaceMatcher);\n      syncBindings(target, entity, events, handlers);\n    });\n  }\n\n  function Syncing(target, entity, bindings) {\n    this.target = target;\n    this.entity = entity;\n    this.bindings = bindings;\n  }\n\n  Syncing.prototype.when = function (eventObj, event) {\n    if (!event) {\n      event = eventObj;\n      eventObj = this.target;\n    }\n    this.eventObj = eventObj;\n    this.event = event;\n    this.handler = () => {\n      sync(this.target, this.entity, this.bindings);\n    };\n    this.target.listenTo(this.eventObj, this.event, this.handler);\n    return this;\n  };\n\n  Syncing.prototype.now = function () {\n    sync(this.target, this.entity, this.bindings);\n    return this;\n  };\n\n  Syncing.stop = function () {\n    this.target.stopListening(this.eventObj, this.event, this.handler);\n  };\n\n  var stateFunctions = {\n\n    // Binds 'bindings' handlers located on 'target' to 'entity' using\n    // Marionette.bindEntityEvents, but then initializes state by calling handlers:\n    //   Backbone.Model\n    //     'all'          (model)\n    //     'change'       (model)\n    //     'change:value' (model, value)\n    //   Backbone.Collection\n    //     'all'          (collection)\n    //     'reset'        (collection)\n    //     'change'       (collection)\n    //\n    // Handlers are called immediately unless 'event' is supplied, in which case handlers will be\n    // called every time 'target' triggers 'event'. Views will automatically sync on 'render'\n    // unless this argument is supplied.\n    //\n    // For event mappings with multiple matching events, all handlers are called for each event.\n    // For example, the following mapping:\n    //   { 'change:foo change:bar': 'doSomething doSomethingElse' }\n    // will call:\n    //   doSomething(model, model.get('foo'))\n    //   doSomethingElse(model, model.get('foo'))\n    //   doSomething(model, model.get('bar'))\n    //   doSomethingElse(model, model.get('bar'))\n    syncEntityEvents(target, entity, bindings, event) {\n      Mn.bindEntityEvents(target, entity, bindings);\n      var syncing = new Syncing(target, entity, bindings);\n      if (event) {\n        syncing.when(event);\n      } else {\n        syncing.now();\n      }\n    },\n\n    // Ceases syncing entity events.\n    // TODO\n    stopSyncingEntityEvents(target, entity, bindings, event) {\n      target = entity = bindings = event; // Suppress unused\n    }\n  };\n\n  var state_functions = stateFunctions;\n\n  _.extend(state, state_functions);\n\n  var index = state;\n\n  return index;\n\n}));\n",null],"sourceRoot":"/source/"}